/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Book as PrismaBook } from "@prisma/client";
import { MyBookArgs } from "../MyBookArgs";
import { MyBookResult } from "../MyBookResult";

export class BookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BookCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookCountArgs>
  ): Promise<number> {
    return this.prisma.book.count(args);
  }

  async books<T extends Prisma.BookFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookFindManyArgs>
  ): Promise<PrismaBook[]> {
    return this.prisma.book.findMany(args);
  }
  async book<T extends Prisma.BookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookFindUniqueArgs>
  ): Promise<PrismaBook | null> {
    return this.prisma.book.findUnique(args);
  }
  async createBook<T extends Prisma.BookCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookCreateArgs>
  ): Promise<PrismaBook> {
    return this.prisma.book.create<T>(args);
  }
  async updateBook<T extends Prisma.BookUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookUpdateArgs>
  ): Promise<PrismaBook> {
    return this.prisma.book.update<T>(args);
  }
  async deleteBook<T extends Prisma.BookDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookDeleteArgs>
  ): Promise<PrismaBook> {
    return this.prisma.book.delete(args);
  }
  async SetBookDescription(args: MyBookArgs): Promise<MyBookResult> {
    throw new Error("Not implemented");
  }
}
